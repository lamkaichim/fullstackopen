1.1：课程信息，第1步
我们将在本练习中开始处理的应用程序将在以下几个练习中得到进一步开发。 在本课程的这个和其他即将到来的练习集中，仅提交应用程序的最终状态就足够了。 如果你想，你也可以为本系列的每个练习创建一个提交，但这不是必要的。

使用Vite来初始化一个新的应用。修改index.js如下：

import ReactDOM from 'react-dom/client'

import App from './App'

ReactDOM.createRoot(document.getElementById('root')).render(<App />)copy
和App.jsx，如下所示

const App = () => {
  const course = 'Half Stack application development'
  const part1 = 'Fundamentals of React'
  const exercises1 = 10
  const part2 = 'Using props to pass data'
  const exercises2 = 7
  const part3 = 'State of a component'
  const exercises3 = 14

  return (
    <div>
      <h1>{course}</h1>
      <p>
        {part1} {exercises1}
      </p>
      <p>
        {part2} {exercises2}
      </p>
      <p>
        {part3} {exercises3}
      </p>
      <p>Number of exercises {exercises1 + exercises2 + exercises3}</p>
    </div>
  )
}

export default Appcopy
并删除多余的文件 App.css和index.css，并移除目录assets。

整个应用都在同一个组件中。重构代码，使其由三个新的组件组成。Header、Content和Total。所有数据仍驻留在App组件中，它使用props将必要的数据传递给每个组件。Header负责显示课程的名称，Content显示各部分及其练习的数量，Total显示练习的总数量。

在文件App.jsx中定义新组件。

App组件的主体将大致如下：

const App = () => {
  // const-definitions

  return (
    <div>
      <Header course={course} />
      <Content ... />
      <Total ... />
    </div>
  )
}copy
警告 create-react-app会自动使项目成为git仓库，除非应用是在一个已经存在的仓库中创建的。很可能你不希望项目成为一个仓库，所以在项目根部运行rm -rf .git命令。

1.2: course information, step2
重构Content组件，使其本身不渲染任何部件的名称或其练习次数。相反，它只渲染三个Part组件，每个组件渲染一个部分的名称和练习的次数。

const Content = ... {
  return (
    <div>
      <Part .../>
      <Part .../>
      <Part .../>
    </div>
  )
}copy
我们的应用目前以相当原始的方式传递信息，因为它是基于独立变量的。这种情况将很快得到改善。
